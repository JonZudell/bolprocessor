Bol Processor BP3 To Do List
============================

This is a list of improvements that have been considered during the development of BP3. None of them are critical to its proper functioning. ;-)
The most requested improvements are listed at the top of the list.

Current location of this file:
https://github.com/bolprocessor/bolprocessor/blob/graphics-for-BP3/BP3-To-Do.txt
You may also check the history of changes:
https://raw.githubusercontent.com/bolprocessor/bolprocessor/graphics-for-BP3/BP3-changes.txt


Real-time MIDI output and input
-------------------------------

- We will implement the MIDI input event handling that worked in BP2.
- There are still many parts of the code marked "WITH_REAL_TIME_MIDI". This marker has been changed to "WITH_REAL_TIME_MIDI_FORGET_THIS" to indicate that these need to be deleted, as they are remnants of BP2's real-time MIDI or initial (unfinished) implementation of real-time MIDI in/output. Leave them unchanged for now, as some code could be reused.


HTML/PHP/Javascript interface
-----------------------------

- Implement command-s (on MacOS) or control-s (on Windows) to save a grammar, data, alphabet, etc. This is almost done in _header.php (line 41) and at the bottomof data.php


Standalone application
----------------------

- https://github.com/cztomczak/phpdesktop => Compile BP3 under Linux or MacOS. The MacOS version is still under development by Czarek Tomczak (czarek.tomczak at gmail)

Alternate options in case "phpdesktop" doesn't fit:
- https://electronforge.io/
- https://github.com/peachpiecompiler/peachpie
- https://laravel.com/
- https://cakephp.org/
- https://www.yiiframework.com/
- https://github.com/bcosca/fatfree
- https://fuelphp.com/
- https://symfony.com/
- https://phalcon.io/en-us
- https://www.chromium.org/Home


Csound orchestra
-----------------

- New instruments are needed in the styles of:
 + pipe organ
 + flute
 + piano
 + harpsichord
 + guitar
 + horn
 + saxo
 + marimba
 + drums
- Study how BP could produce score instructions modifying parameters in some instruments
- Find an instrument that would create a switched bandpass filter with either a sound file or another instrument as input. The idea is to reproduce the effect of sympathetic strings and use it to add partials to other instruments (much like the Indian tanpura). (These devices had been successfully wired as "switch filters" in the Shruti Harmonium.)
- Modify "new-vina" to produce lower frequencies, minimum "C2"


Real-time Csound
---------------

- This development should be easy, using ChatGPT ;-)
- Implement UDP for communicating with Csound. Links:
https://csound.com/docs/manual/udpserver.html
https://www.geeksforgeeks.org/udp-server-client-implementation-c/
- Implement OSC ?


Csound
-------------

- (optionally) Revise CsoundWrite to make sure that events are ordered by "note-on" dates, notably with tied notes/sound-objects
- Reference: https://csound.com/docs/manual/i.html => use negated p1 for distinct note-off?
- Implement output to DAC in the interface: https://csound.com/docs/manual/CommandFlags.html
- Csound can compile orchestras and scores directly from strings of text: this feature could be exploited


Open Sound Control (OSC)
------------------

- This development should be easy, using ChatGPT ;-)
- Read https://en.wikipedia.org/wiki/Open_Sound_Control
- This might create a framework for connecting BP3 with PYO (http://ajaxsoundstudio.com/software/pyo/)
- Also try direct communication with MuseScore


Microtonal scales
----------------

- Include values for optionally stretching each octave
- Implement a performance control to set A4 frequency (diapason) in the score


Actions
-------

- Implement produce-items N action
- Implement play-all action
- Fix analyze-item action
- Implement expand-item & show-beats actions


Interruption
------------

- Currently, a STOP button is displayed on the produce.php page during the process of the console. Clicking it creates a "_stop" file in folder temp_bolprocessor/messages which the console captures in the stop() function. However, after working for some time, the_createfile.php script doesn't work. It waits for the end of the performance… Then only a restrat of Apache in MAMP will stop it.
- Similarly, produce.php gets the pid of the process when the console is called. But for the same reason, _createfile.php cannot send a "kill" command when the STOP button is clicked.
- As BP3 is multi-platform we cannot rely on AppleEvents to communicate with the console (as it was done in BP2).
- After implementing MIDI input it will be possible to send a MIDI event that activates a script command to interrupt the production and/or playback.
- We need another multi-platform technique to do the same from the STOP button, but none of the solutions suggested by ChatGPT were satisfactory.


MIDI file player
-----------

- Implement Pause and Resume (check https://www.midijs.net/midijs_api.html)
- Standalone application might not accept to call remote midi.js
- Implement connection with FluidSynth (https://www.fluidsynth.org/)


Cloud version 
-------------

- This has been envisaged as an option. Creating a standalone application seems a better choice.
- Install a html/php/MySQL server for the sharing of BP console + PHP interface (+ website?)
- Set up restricted access via (free) non-anonymous subscription (in compliance with RGPD)
- Grant every user some storage space (with time limit?)
- Run all features except real-time MIDI in/out
- Csound scores could be exported and/or processed by Csound, and WAV files dowloaded and/or played on line via HTML <audio> tags
- MIDI files could be dowloaded and/or played on line via MIDIjs
- Beware of bandwidth with online playing


Input files
-----------

- Interpret script commands producing MIDI messages such as _script(MIDI program …) or _script(MIDI controller …)
- Implement the -s/-S options for specifying the start string => not necessary as it exists on the Grammar window of the PHP interface


MIDI files (Probably unnecessary, as MIDI file creation works perfectly.)
----------

- note that currently the creation of type-1 MIDI files works even with very large sets of data… Therefore the following issues are not critical.
- probably error when creating MIDI file from -gr.ShapesInRhythm because a very long silence is inserted, neither visible on graphs nor on the Csound score
- "Error WriteVarLenQuantity(): value %u is out of range" may happen when data is faulty
- add code to write track names (is it necessary?)
- write 2 bytes of MIDIfileTrackNumber instead of 1 so that more than 255 tracks are possible;  add error checking to make sure it doesn't exceed 32,767 (?)
- reimplement the function ReadVarLen()
- should "produce all" write each item to its own track in a type 2 file?  (Currently writes all items to the same track). This may be useful if the MIDI file is downloaded, but MIDIjs won't play it.
- close midi files at the end of MakeSound() ? (and reopen if for each item?) => This may be complicated because the size of data needs to be writen in its header
- when writing a type 2 file, an empty track is written and the end of the file but it not counted in the final track count that is written when closing the file; best solution would be to avoid writing the track or truncate the file?
- fix or remove the handling of FileSaveMode in PrepareMIDIFile()? The option is currently always set to ALLSAME by Inits() and LoadSettings(). Until this option becomes necessary it would be best to leave it out.
- remove  "('-' for stdout)" text from --midiout help?  Piping MIDI files probably won't work because we use ftell/fseek to write some parts of the file.
(Alternatively, could support dumping MIDI file in a text format to stdout?)


Images
------

- In Graphic.c, in the Improvize mode, dates on the ruler are adjusted by the "shift" variable. This doesn't yet work on the "pianoroll" type, because its background is drawn before updating PianorollShift. This could be solved by drawing the pianoroll graph after the completion of MakeSound, i.e. when calling DrawItem(). To this effect, the drawings of notes would be stored in a structure.
- When no settings file is specified, allow the creation of images via a command line option. This option should specify a location for images. Currently, image location is the one of the trace file, which is always specified by the HTML/PHP interface.
- Revise the drawing of time streaks (the vertical blue lines). These should be adjusted to the (varying) tempo instead of the default metronomic setting.


Compilation
-----------

- Modify the C source to handle some Unicode characters that are not currently accepted, such as '≤', '≠', '•', etc.


Claning up
----------

- The console code contains many obsolete parts (marked as such and not compiled). These are mostly remnants of BP2's built-in interface, at the time we wanted to maintain a MacOS standalone version of BP2 using conditional compilation. These will be removed unless they are useful for further development.
- Unused code files have been moved to a "not_used" folder in the "BP3" folder. These can be deleted later.


Documentation
-------------

- Write new docs for BP3 (command-line usage, etc.)
- Convert BP2 documentation to an (open-source) authoring system that can help maintain the organization & internal links as well as output in multiple formats (HTML, PDF, etc.) ??


========

IMPORTANT NOTE: If you are interested in taking part in this project, join the BP developer's list:
https://sourceforge.net/projects/bolprocessor/lists/bolprocessor-devel

