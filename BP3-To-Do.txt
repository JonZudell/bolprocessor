Bol Processor BP3 To Do List
============================

Documentation
-------------

- write new docs for BP3 (command-line usage, differences, etc.)
- rewrite the source code README
- convert BP2 documentation to an (open-source) authoring system that can help maintain the organization & internal links as well as output in multiple formats (HTML, PDF, etc.) ??
- reorganize & rewrite BP2 documentation


Csound orchestra
-----------------

- Modify "new-vina" to produce lower frequencies, minimum "C2"
- New instruments are needed in the style of:
 + pipe organ
 + flute
 + piano
 + harpsichord
 + guitar
 + horn
 + saxo
 + marimba
 + drums
- Study how BP could produce score instructions modifying parameters in some instruments
- Find an instrument that would create a switched bandpass filter with either a sound file or another instrument as input. The idea is to reproduce the effect of sympathetic strings and use it to add partials to other instruments (much like the Indian tanpura). (These devices had been successfully wired as "switch filters" in the Shruti Harmonium.)


Standalone application
-----------------

- https://github.com/cztomczak/phpdesktop => Compile BP3 under Linux asap. Also support PHPdesktop project to have it running under MacOS

Alternate options:
- https://electronforge.io/
- https://github.com/peachpiecompiler/peachpie
- https://laravel.com/
- https://cakephp.org/
- https://www.yiiframework.com/
- https://github.com/bcosca/fatfree
- https://fuelphp.com/
- https://symfony.com/
- https://phalcon.io/en-us
- https://www.chromium.org/Home


Actions
-------

- implement produce-items N action
- implement play-all action
- fix analyze-item action
- implement expand-item & show-beats actions
- new action for listing RT MIDI devices ? Create a file which the user will read via the interface, then select option(s) that will be added as tokens to the "Play" command line
- some C-code source files are not UTF8 because they contain incompatible characters. This has to do with using ‘…’ and ‘•’ in the text output. Examples in -gr.Ames and -da.acceleration.


Cloud version (option)
-------------

- Install a html/php/MySQL server for the sharing of BP console + PHP interface (+ website?)
- Set up restricted access via (free) non-anonymous subscription (in compliance with RGPD)
- Grant every user some storage space (with time limit?)
- Run all features except MIDI in/out
- Csound scores could be exported and/or processed by Csound and WAV files dowloaded and/or played on line via HTML <audio> tag
- MIDI files could be exported and/or processed by Csound and WAV files dowloaded and/or played on line via MIDIjs.
- Beware of bandwidth with online playing


Input files
-----------

- fix crash when loading a glossary file
- fix crash when grammar contains script commands
- support UTF-8 text encoding for input files & output
- implement the -s/-S options for specifying the start string => Not useful as it exists on the Grammar window of the PHP interface
- identify intput files with prefixes even when they are preceded by a path. => Read next
- restore the feature that looks for names of related files in the input files and auto-loads them (to be discussed...) => probably useless because the interface takes care of these links and it creates links for editing related files


MIDI files
----------

(Note that currently the creation of type-1 MIDI files works even with very large sets of data…)
- "Error WriteVarLenQuantity(): value %u is out of range" may happen when data is faulty
- add code to write track names (is it necessary?)
- write 2 bytes of MIDIfileTrackNumber instead of 1 so that more than 255 tracks are possible;  add error checking to make sure it doesn't exceed 32,767(?)
- reimplement the function ReadVarLen()
- should "produce all" write each item to its own track in a type 2 file?  (Currently writes all items to the same track). This may be useful if the MIDI file is downloaded, but MIDIjs won't play it.
- close midi files at the end of MakeSound() ? (and reopen if for each item?) => This may be complicated because the size of data needs to be writen in its header
- when writing a type 2 file, an empty track is written and the end of the file but it not counted in the final track count that is written when closing the file; best solution would be to avoid writing the track or truncate the file?
- fix or remove the handling of FileSaveMode in PrepareMIDIFile()? The option is currently always set to ALLSAME by Inits() and LoadSettings(). Until this option becomes necessary it would be best to leave it out.
- remove  "('-' for stdout)" text from --midiout help?  Piping MIDI files probably won't work because we use ftell/fseek to write some parts of the file.
(Alternatively, could support dumping MIDI file in a text format to stdout?)


Csound scores (for experts)
-------------

- (optionally) revise CsoundWrite to make sure that events are ordered by "note-on" dates, notably with tied notes/sound-objects
- reference: https://csound.com/docs/manual/i.html => use negated p1 for note-off?


Real-time MIDI
--------------

- revise CoreMIDI driver and allow optionally building with it on Mac OS X
- change the "null driver" to output MIDI messages as text
- write a new cross-platform MIDI driver using the PortMIDI(?) library
- maybe MIDI events could be channeled by Csound once it is accessed in real time


Real-time Csound
---------------

- Implement UDP for communicating with Csound. Links:
https://csound.com/docs/manual/udpserver.html
https://www.geeksforgeeks.org/udp-server-client-implementation-c/


Open Sound Control
------------------

- Read https://en.wikipedia.org/wiki/Open_Sound_Control
- This might create a framework for connecting BP3 with PYO (http://ajaxsoundstudio.com/software/pyo/)
- Also try direct communication with MuseScore


Images
--------------

- When no settings file is specified, allow the creation of images via a command line option. This option should specify a location for images. Currently, the location is identical to the location of the trace file.
- Revise the drawing of time streaks (the vertical blue lines). These should be adjusted to the (varying) tempo instead of the default metronomic setting.


Microtonal scales
----------------

- Include values for optionally stretching each octave
- Implement a performance control to set A4 frequency (diapason) in the score

