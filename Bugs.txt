Here is a short list of known issues since I began working on the project:

- Level 3 & 4 optimization in CWpro4 seem to be breaking some things.  Most
noticeably, selecting "New Project" causes an infinite loop in setting the
Midi output port?

- Several "variable used before initialized" warnings should be investigated.

- These dialogs cannot be closed with Command-W: Tuning, Default performance
values, Default strike mode, and File Save Preferences.

- importing a long Csound score into a sound-prototype (with large time values)
results in a lot of "overflow" messages in the Trace window.  Pressing Command-.
during this output brings up the Resume/Stop dialog and choosing Stop then 
_starts_ a silent performance for a length of time. (Equal to last performance 
length?) ??

- I had a fatal system crash ("bomb" dialog) while using the sound prototypes
window.  First, opened prototypes, then added some names to an alphabet.  Then
did search and replace on alphabet names.  Closed alphabet window, no save, 
then said no when it asked me to load -mi file, then trying to browse through
prototypes caused a crash.

- Are MIDIfileOpened and other related globals being reset after deleting an
aborted file write?

- Crashes if too much text is inserted into a TextEdit buffer.

- BP2 crashes if you press the "Piano roll" button in the Object prototypes
window several times in a row.  (tries to dispose of several empty handles
in MakeSound() first).

- Colored text displays as black on OS X.

- TEToScrap() does not work on OS X; Cut and Copy commands may not work
  correctly all of the time (especially to/from other apps). (Made an attempt
  at fixing this -- needs more testing).

- Auto-scrolling in text windows (by dragging beyond the current view rect)
  does not move the scroll bar.  (TE or WASTE)

- TE windows do not always display all text in the same font size. (Fixed?)

- Mouse downs in Control Panel & Script Control dialogs are processed as "hits"
  even if the user drags out of the control to cancel the click.  This does not
  happen if the dialog is an inactive window.  Buttons in other dialogs "flash"
  after cancelling a click but their actions are not taken.

- With TextEdit, BP2 uses TextCopy() to save the last character deleted with
  the delete key.  This replaces the contents of the clipboard, of course, 
  which should not happen.  (See about line 630 in Interface1.c -- the keyDown
  case of DoEvent()).

- Selecting a miscellaneous dialog (one not in gpDialogs[]) when a text window
  is active leaves the edit record active.  With "Default strike mode", this 
  allows typing, deleting, pasting, etc. in the last edit window.

- In general, many menu/key commands work in the previously selected window
  after selecting a miscellaneous dialog.  (This may be desirable in some
  cases ?? but certainly not in all).

- When a miscellaneous dialog is the active window, the insertion point only 
  blinks in edit boxes if the mouse cursor is over the window.  Also if the
  previously active window was a text window, the insertion point continues
  to blink in that window.
 
- Probably should make it so that the message and info windows are not able to
  be selected as the front window.  (It is useful to do so to change their text
  size but then the window is usually not tall enough anyways).
  
- Arrow keys do not move properly when some text is already selected.
  Option-arrow-keys do not move from word to word the same as other apps.

- When executing only the current selection of a script, the next line after 
  the selection is added to the selection if the last character in the selection
  is a carriage return.

- Opening a non-grammar alias file via the 'Open file' script command saves the 
  name of the alias as in Filename[w] (and thus the window title) instead of the
  name of the target of the alias.  Is this desireable?  (When an alias is 
  opened via a link in another BP document, the link changes.  Is this desirable?).

- 'Open file' script command chooses the target window based on file prefix.

- ChangeNames() in Interface2.c (used only by 'name' AE), chooses the target 
  windows based on file prefixes.

- Loading a file into the Data window (and presumably others) without clearing
  the window (when BP2 asks) does not change the window title to the new file's
  name BUT that file will be saved to when choosing the 'Save' command without
  displaying a Save dialog.  (Is this bug because we are now setting Created[w]
  when loading a file (and perhaps should not when window is not cleared) or is
  it just a misconception about how to handle this situation??)   I believe that
  that the window title should ALWAYS match the Save target; if the title is
  "New Data" (or other "untitled" equivalent) then 'Save' should display the 
  file dialog.  The best solution here might be to create a new command in the
  File menu 'Insert file...' and not ever ask about clearing a window when
  'Open' is chosen!

- Command-= must be pressed twice to make the Control Panel the active window;
  but it is brought to the front the first time so maybe this is OK?.

- Some of the fields in the Csound Instruments window are not initialized when
  'New Instrument' is chosen.  (GEN routines, some of the p-field numbers).
 
- Usability issue:  Clicking in another window or (especially) the menu bar 
  with the Csound Instruments window active can cause alerts to appear when
  any of the parameters are wrong.  If the number of p-fields box is wrong,
  an alert appears but GetCsoundInstruments() returns OK anyways, so the 
  event is handled after the alert is dismissed (even the menu bar click!).

- Usability issue:  Menus are not hilited for 8 ticks after pressing a
  keyboard shortcut.

- The output of 'Trace production' includes null characters.

- Usability issue:  The selection hiliting is hidden when switching to another
  BP2 window but not when switching to another application.  Would be best to
  change hiliting to an outline.

- Load Settings() does not allow opening of any file type when anyfile is TRUE.
  It sets type to 0 but then passes gFileType[iSettings] to CheckFileName().
  Also, it displays an error message when the user chooses 'Cancel' in the 
  open file dialog.  Probably should rework mLoadSettings() to call OldFile()
  before calling LoadSettings and pass a spec or something??  (Needs to somehow
  tell the difference between a call from the menu command and a call because
  another file was opened with a link to a settings file).

- Command-Shift-(Up or Down)-arrow moves the cursor instead of selecting text.

- It would be nice if Command-arrows in Prototypes window would auto-repeat.
  (Be careful that no other keyboard command shortcuts do though!).

- Some of the static text and edit text items in main Object Prototypes window
  do not get drawn when activating the window (particularly from the menu).
  This seems to only be a problem in the TextEdit build and may be fixed by
  removing the call to UpdateWindow() at the end of BPActivateWindow() ??

- In WASTE build, deleting text selection by typing and then immediately 
  Undo-ing only removes the typed char(s); it does not restore the lost text.
  (Undo works OK with left delete key but not the right delete key). (In 
  TextEdit build, the deleted selection is copied to the clipboard but this
  is also incorrect).

- 'Help', 'Home', 'End', 'Esc', 'Page up', 'Page down', 'Clear' and 'Enter'
  keys get typed into edit boxes in dialogs.

- DisplayHelp() may not show the correct help text if the item sought for
  is an initial substring of an item already displayed in the Help window.
  (eg.  Do help on 'Csound implementation', then try getting help on the
  'Csound' button in wPrototypes1).

- Closing the 'Random Sequence' window while recording a script writes 'Hide
  window "Weight"' to the script.  (This command does close the Random window).

- Clicking in one of the edit text boxes in the "Buffer size" window when BP help
  is on looks up a help string containing "garbage" characters.

- Usability issue:  Help window is brought to the front instead of becoming the 
  active window when displaying help items if the active window is not in
  Windows[w].  This can produce some unintuitive situations.

- Seem to have gotten rid of the issue with bad values in Csound Instruments
  preventing the menus from being pulled down.  However, still shows alerts
  when switching to other windows in Windows[w].  If you switch to a non-Windows[w]
  dialog, then you get the alert while trying to switch to windows other 
  than Csound Instruments which is very confusing.  IDEA 8/15/13:  Maybe the 
  solution should be to just initialize the settings with good values! 

- NEW BUG 11/15?  "Clear", "Load", "REC", and "Execute" buttons on Script Control 
  Panel are dimmed when first opened after loading a project (try -gr.koto3). 
  Can only load and run using the menus. Buttons become active after running the 
  script.

- Script records this command:  Hide window "Time accuracy"
  but this command is not accepted as valid; "Missing terminating quote"

- When a new startup settings file (-se.startup) is saved, its creator and filetype
  codes are not set ?

- Usability issue:  Can we easily replace non-movable modal alerts with standard
  movable ones ? (see StandardAlert() API in Appearance API ?)

- Usability issue:  Many confusing things happen in the user interface during
  playback such as the Graphics window appearing to be active but the first click in
  the window is generally ignored and it does not respond to clicks in its resize box
  until another part of the window is clicked.  Other windows do not respond to being
  dragged on the first click.  (The Control Panel or the window that was active
  before choosing "Produce items" from the menu is draggable with one click at the
  beginning of playback).  In general, it is difficult to reliably get the
  Resume/Stop window to appear by clicking the mouse (see next item).  These
  anomalous behaviours stop once the Resume/Stop window appears.  Is this caused by
  calls to MyButton(1) or MyButton(2) where certain classes of events are ignored and
  (I think) discarded ??
  
  This code in MyButton() is probably to blame for some of the problems:
  
  		switch(theclick) {
			case inDrag:
			case inGrow:
				BringToFront(whichwindow);
				break;
			case inContent:
				result = OK;
				intext = FALSE;
				if(w < WMAX && w != Nw && w != wScript) {
					BPActivateWindow(QUICK,w);
					}
				else {
					result = OK;
					if(result != DONE) DoContent(whichwindow,&event,&intext);
					}

- Usability issue:  The Resume/Stop dialog should be replaced with a movable playback
  transport that appears at the beginning of playback.

- Usability issue:  Program logic should be revised to save the results of 
  computations so that the cyclic modal dialog after playback ("Play again"/"Produce
  more"/"Display item"/"Cancel") can be removed.  These options could then be added
  to the playback transport mentioned above.

- Doesn't show the insertion point for a sound-object prototype after clicking on the
  graphic to move the insertion point ?

- Insertion point in sound-object prototypes graphic is set incorrectly

- Why is the user sometimes forced to save modified prototypes or lose all changes 
  when the prototypes window is reactivated (i.e. the -mi file seems to be reloaded)?

- "Export score" function in the "Csound object prototype" window (wPrototype7) 
  writes BP2's header to the top of the file:
  
	// Bol Processor version BP2.9.8
	// Prototypes (7) file saved as 'ambient1.sco'. Date: Thu, Aug 29, 2013 -- 12:59 PM

  which are not legal comments in a Csound score and generate these error messages:
  
	sread: illegal opcode /
	  section 1:  at position 1
	  in line 1 of file input ambient1.sco
		  remainder of line flushed
	sread: illegal opcode /
	  section 1:  at position 1
	  in line 2 of file input ambient1.sco
		  remainder of line flushed

  (Not a big problem since Csound will still read the rest of the score OK and render it).

- Usability issues:  The delayed loading of "linked" files specified in the Data, Grammar,
  and Alphabet along with BP2's "desire" to keep some of those files compiled or updated
  causes some behavior that I (akozar) find strange or confusing.

  Eg.  If I load a data file that references a glossary, then open the Glossary window, it
  is "empty" (or contains its previous contents?).  If I make no changes to the glossary
  but merely click to activate the Data window again, BP2 then loads and compiles the
  specified glossary.  Similar or other "unexpected" actions occur when switching from (or
  to?) the Interaction and Object Prototypes windows as well.

  Merely activating a different window should not cause a cascade of program actions in my
  opinion.  Is the solution to always load "linked" files immediately, or to delay it further
  until they are really needed, or some other scheme that makes it more obvious to the user
  what will happen?  If immediately, should the user be prompted with a list of linked files
  that will be loaded and asked which ones to load and given the opportunity to save the 
  existing contents of any windows that will be replaced?
  
  All of the Set/Get procedures called in BPActivateWindow() should be reviewed to determine
  which can unexpectedly "interrupt" the user, but see these particular lines for the above:
  
    if(Nw == wInteraction && !CompiledIn) if(CompileInteraction() != OK) return(OK);
    if(Nw == wGlossary && Nw != newNw && mode == SLOW) UpdateGlossary();
    if(newNw == wPrototype1 && !CompileOn && mode != AGAIN && (!CompiledGr || !CompiledAl))
        return(mObjectPrototypes(Nw));

  For some of the faster Set/Get procedures (non-file-based dialogs), perhaps an 
  additional parameter with values DONT_INTERACT and ASK_TO_CORRECT could be useful?

- "Save file" and "Revert to saved..." are dimmed after refusing a "Save changes" prompt
  even though the file & window are still open with unsaved changes.
