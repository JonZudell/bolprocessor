// Bol Processor version BP2.9.3
// Grammar file saved as '-gr.Tut1, Time&Rhythms'. Date: zon, 24 aug 2003 -- 15:31

In this tutorial you shall see (and hear) some examples of sequence of measures. 
The best way to handle measures in BP, is to think in density: the more notes in a certain time unit, the faster they go. 
First you define a time in which notes have to be performed. Then: how much notes. 
In this example (time = 1, = 1 second) you see that the first measure has 1 note, so the duration of that note is one second. In the second measure of 1 second there are 4 notes, so the duration of 1 of that 4 notes is 1/4 second. 
Consequently we have notated here: 1/1, /1/4 1/4 1/4 1/4, 1/1. 
(For listening select the whole sequense, and hit 'Play selection' in the Control //Panel). 

{1, C3} {1, C3 C3 C3 C3} {1, C3}

Lets try this one now: 1/1, 1/4 1/8 1/8 1/4 1/4 1/4, 1/1.
In BP we handle this by embedding. However: the time unit of the embedded part become relative now. When you give it the same value as the value of the total measure, in this case '1,' you get the exact division, as notated above. 
So 1/1, 1/4 1/8 1/8 1/4 1/4 1/4, 1/1 become: 

{1, C3} {1, C3 {1, C3 C3} C3 C3} {1, C3}

In the same way 1/1, 1/4 1/8 1/16 1/16 1/4 1/4, 1/1 become:

{1, C3} {1, C3 {1, C3 {1, C3 C3}} C3 C3} {1, C3}

(Take care of the brackets!!!)

You shall understand now that making tuplets in BP is an easy job: 

{1, C3} {1, C3 C3 {1, C3 C3 C3} C3} {1, C3}

And this is the way making a tuplet of 1/4 notes

{1, C3} {1, C3 {1, C3 C3 C3} C3} {1, C3}

Above we noticed that the time unit of the embedded part is relative. Let's hear what happen if we 'stretch' the //embedded part:  

{1, C3} {1, C3 {2, C3 C3 C3} C3} {1, C3}

In fact, when we give the embedded part the value '3,' the whole measure become a quintuplet!:

{1, C3} {1, C3 {3, C3 C3 C3} C3} {1, C3} 

Of course, we can also notate the quintuplet in this way: 

{1, C3} {1, C3 C3 C3 C3 C3} {1, C3} 

Let's make a tuplet in a quintuplet now: 

{1, C3} {1, C3 C3 C3 {1, C3 C3 C3} C3} {1, C3} 

The same with a measure-change (time):   

{1, C3} {2, C3 C3 C3 {2, C3 C3 C3} C3} {1, C3} 

At this way you can make extreme 'rubato' sounding measures: 

{1, C3 C3 {2, C3 C3 C3}} {2, C3 C3 C3 {2, C3 C3 C3} C3} {1, C3 C3 C3 C3} {1, C3}

When we want to make this sequence of measures twice as long (slow), we can handle this using the '_tempo' tool

_tempo(0.5) {1, C3} {1, C3 {1, C3 C3 {2, C3 C3 C3}} C3} {1, C3}

//Or twice as short(fast): 

_tempo(2) {1, C3} {1, C3 {1, C3 C3 {2, C3 C3 C3}} C3} {1, C3}

Also it is possible to randomize the sequence: 

_rndseq {1, C3} {1, C3 {1, C3 C3 {2, C3 C3 C3}} C3} {1/2, C3}

Or to play it from right to left: 

_retro {1, C3} {1, C3 {1, C3 C3 {2, C3 C3 C3}} C3} {1/4, C3}

The next part is about rests. BP handles this with the sign '-' or a time unit

{1, C3} {1, C3 C3 - C3} {1, C3}

The same sequence, but now with a rest notated with a time unit

{1, C3} {1, C3 C3 1 C3} {1, C3}

Let's hear what happenend with this examples:

{1, C3} {1, C3 C3 -- C3} {1, C3}

{1, C3} {1, C3 C3 2 C3} {1, C3}

Indeed, we hear the same. 
I prefer the time unit notation, because of this possibilities: 
{1, C3} {1, C3 C3 1/4 C3} {1, C3}

{1, C3} {2, C3 C3 {2, C3 C3 1 C3} C3} {1, C3}

{1, C3} {2, 1 C3 C3 {2, C3 C3 1 C3} C3 1/4} {1, C3}

Of course we can play very short notes (staccato)

_staccato(75){1, C3} {2, 1 C3 C3 {2, C3 C3 1 C3} C3 1/4} {1, C3}

{1, C3 6} {1, C3 2 C3 3 C3 1 C3} {1, C3}

Rhythms can also be notated with a period '.', but the possibilities are limited (more periods between notes have no effect):  
{1, C3} {1, C4 . C3 C4 . C3} {1, C4}

Let's take a look now, how to handle sequences in parallel. Look and listen to this example: 

{1, C3} {1, C3 C3 C3 C3} {1, C3}, {1, C4} {1, C4 C4 C4 C4} {1, C4}

You see that the sequences are seperated by a comma. At this way you can create complex rhythms: 

{1, C3} {1, C3 C3 C3 C3} {1, C3}, {1, C4} {1, C4 C4 C4 } {1, C4}

{1, C3} {1, C3 C3 C3 C3 C3} {1, C3}, {1, C4} {1, C4 C4 C4 } {1, C4}

The next examples shows that the first sequence has priority (in time)

{1, C3} {2, C3 C3 C3 C3 C3} {1, C3}, {1, C4} {1, C4 C4 C4 } {1, C4}

{1, C3} {1, C3 C3 C3 C3 C3} {1, C3}, {1, C4} {2, C4 C4 C4 } {1, C4}

So when you notate: 
{1, C3 C3, C4 C4 C4}
you hear 3 agains 2

When you notate:
{1, C3 C3 C3, C4 C4} 
you hear 2 agains 3

Let's look now to this example (there is a rest of 1 in the second parallel part): 

{C3 C3 C3, 1 C4 C4 C4}

As you have heard, the sequence starts on different times, but he ends on the same time! So it seems impossible to create a canonic structure. But it is not impossible (as you shall understand in the meanwhile...): 

{C3 C3 C3 _rest, 1 C4 C4 C4}

{C3 C3 1 C3 _rest, 2 C4 C4 1 C4}

Here is an example of a 3 part canon: 

{C3 C3 1 C3 _rest, 1 C4 C4 1 C4 _rest, 2 C5 C5 1 C5 }

And a 4 part:
{C3 C3 1 C3 _rest, 1 C4 C4 1 C4 _rest, 2 C5 C5 1 C5 _rest, 3 C6 C6 1 C6 } 

Variation can be made at this way: 

{C3 C3 1 C3 _rest, 1 C4 C4 1 C4 _rest, 3/2 C5 C5 1 C5 _rest, 2 C6 C6 1 C6 }
_rndseq {C3 C3 1 C3 _rest, 1 C4 C4 1 C4 _rest, 3/2 C5 C5 1 C5 _rest, 2 C6 C6 1 C6 }

As you hear, tools like _rndseq or _retro also affect the note order!