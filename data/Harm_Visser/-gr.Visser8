// Bol Processor version BP2.9.1
// Grammar file saved as '-gr.Visser8'. Date: Sam 4 Juil 1998 -- 22:16
-or.Visser7
-se.Visser8

// A grammar by Harm Visser, June 1998

ORD
_mm(60.0000) _striated

gram#1[1] S --> L4

gram#1[2] L1 --> M1 M2 M3
gram#1[3] L2 --> M4 M5 M6
gram#1[4] L3 --> M7 M8 M9

gram#1[5] L4 --> _rndvel(20) _vel(80){_tempo(1/2) _chan(9) M10, _chan(1) M11 M12}

gram#1[6] M1 --> {_tempo(1) _transpose(0) C3 B3 F3}
gram#1[7] M2 --> {_tempo(2) _transpose(11) M1}
gram#1[8] M3 --> {_tempo(3) _transpose(5)  M1}

gram#1[9] M4 --> {_tempo(1) _transpose(0)   {M1 M2 M3 }}
gram#1[10] M5 --> {_tempo(2)_transpose(11)  {M1 M2 M3 }}
gram#1[11] M6 --> {_tempo(3) _transpose(5)  {M1 M2 M3 }}

gram#1[12] M7 --> {_tempo(1) _transpose(0)  {M4 M5 M6 }}
gram#1[13] M8 --> {_tempo(2) _transpose(11)  {M4 M5 M6 }}
gram#1[14] M9 --> {_tempo(3) _transpose(5)   {M4 M5 M6 }}

gram#1[15] M10 --> {_tempo(1) _transpose(0)   {M7 M8 M9 }}
gram#1[16] M11 --> {_tempo(2) _transpose(11)  {M7 M8 M9 }}
gram#1[17] M12 --> {_tempo(3 )_transpose(5)   {M7 M8 M9 }}


COMMENT:
Bernard, take a close look to this grammar. It is complete based on a
function that I have made in PatchWork. Take 3 notes and take their
intervals to transpose. The result is a kind of 'autotranspose'. You get a
'fractal' - the idea of the famous Von Koch-curve. The next step is making a
recursive loop, so that you can set the level of recursion. The nummer of
notes grows exponential: 3 9 27 81 243 etc. Of course you can do the same
with rhythm-values.

The grammar is a BP2-version of exact the same idea. It has 4
recursion levels. (You might also say 'depth'. It is in fact a 'copy' of the
PW-function). That's why S --> L4 (level 4) (number of notes 243). The
difference between BP2 and PW is the function in PW is fixed.
This is not the case in BP2, I can easy make subtle changes (deviations)
in the process. I can 'break in', so to speak. In his grammar I have set a
comma between M10 and M11 and set M11 on the sax. The result is a
polymetric canon!