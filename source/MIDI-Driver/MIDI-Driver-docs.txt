preFORM 3.0 MIDI Driver Source Code
© 1988 Lee Boynton, MIT Media Lab.

The file "MIDI Driver.c" is a source file for THINK C version 3.0p2.
	/* Now upgraded to ThinkC 5.0.2  Bernard Bel */
The file "test.proj.rsrc" contains the current driver resource.

To MAKE a driver:
	1. Create a project with Lightspeed C.
	2. Choose "Set Project Type…" from the "Project" menu.
	3. Choose "Device Driver". Set the Name to be ".MIDI" and the ID to be 23.
	4. Add the Lightspeed C library file "MacTraps"
	5. Add the file "MIDI Driver.c"
	6. Select "Build Device Driver…" in the "Project" menu. 
		The resulting file (that you choose contains the driver in its resource fork.



Info about driver:

This driver is a standard Macintosh driver, and should be accessed 
through the _Open, _Read, _Write, _Status and _Control traps (these
are the "low level" driver interface calls. They are also known
as PBOpen, PBRead, etc). See Inside Mac for details.

The driver must must be loaded using the resource manager before use.
You first call OpenResFile with the filename "test.proj.rsrc". Then
you have to call the PBOpen trap with the name of the driver: ".MIDI".
Once you've successfully opened the driver, you must open one or both
of the serial ports (A=Modem or B=Printer). Nothing will happen until you do.
You open these through the a DriverControl call with the control code
OPEN_CODEA or OPEN_CODEB. Now you can read and write to your heart's content.

To read or write to the driver, you pass a pointer to a MIDI_Event (defined
in midi1.h) which is a longword time, followed by an event type byte and then
the three MIDI bytes. For reading, the time is the clock time (in 1/100th's of
a second since the driver was opened) that the last byte of the event was
received. For writing, the time is the time that the event should be written.
If the time is in the past or 0, the event is written immediately, otherwise
it is scheduled.

The three types of events are normal, raw, and null. The remaining three bytes
have different meaning depending on whether the event is normal or raw (null
events are only used for reading, and indicate that there is no pending
data). Raw events are for reading or writing raw, unparsed, MIDI bytes. There
is only one byte per raw event, and it is contained in the third byte following
the type byte (i.e. you can think of a whole MIDI_Event as two longwords, the time
is the first, and the event is the second. In this case, the raw byte will be
the lowest order byte of the second longword). More info on raw events below.
If the event is a normal event, then the next byte is always the status byte,
and any data bytes follow in the next two bytes. For example, if the event
has only one data byte (like a monophonic pressure event), then the third byte
following the type byte is just garbage.

The type byte has one additional bit, bit 5 which indicates which port, A or B,
the event originated from or is destined for. In the case of writing, if the
appropriate port is not opened, the event is directed to the open port.

The most common use for raw events are for Sysex. To write a raw event,
specify the RAW_EVENT as the type (the RAW_EVENT type is 0, so that if you 
simply blast a single byte at the driver it will blast it out the modem port).
To read a raw event, you must set the read mode of the driver (with the
control call with code READMODE_CODEA or READMODE_CODEB) to be RAW_EVENT.
If the read mode is NORMAL_EVENT, the driver will eat & bury any sysex
received. Thus to receive sysex in the general case, you must change the
read mode of the driver to RAW_EVENT as soon as you see the start of sysex
event. As soon as you see the end of sysex, you should change back to
NORMAL_EVENT. NOTE THAT YOU WILL NEVER SEE THE START OF SYSEX EVENTS AT
ALL UNLESS YOU SET THE INPUT FILTER TO ALLOW THEM!!! (read on).
[There's definitely a bug here. If the sysex stream is interrupted by
a new status byte that is not the end of sysex byte, which can happen in 
a merge situation, then the driver is hosed. The right solution is to
pass sysex bytes as raw data if the input filter allows sysex at all. -joe]


The driver has the ability to filter which events are read in NORMAL_EVENT
read mode. This filter defaults to MIDI channel messages only, but you
can set the filter easily enough. The filter is a longword with the bits
defined as follows:

  	Midi Event		Bit No.
 	Note Off		0
 	Note ON			1
 	PolyTouch		2
 	ControlType		3
 	ProgramType		4
 	Aftertouch		5	(MONO of course)
 	PitchBend		6
 	SysEx			7
    TimeCode		8
 	Songpos			9
 	SongSel			10
 	TuneType		13
 	EnsSysEx		14
 	ClockType		15
 	StartType		17
 	ContType		18
 	StopType		19
 	ActiveSense		21
 	Reset			22
 	
A high bit means pass that event, a 0 means filter it. Thus the default longword
is: 0x7fL which means filter all messages from Sysex through Reset. You set
the filter through a control call with FILTER_CODEA or FILTER_CODEB.For the 
complete list of control and status codes see midi.h and the DriverControl 
and DriverStatus functions in Midi Driver.c.

The driver is also capable of running at different clock speeds, down to a
single millisecond. This can be set via TICKSIZE_CODE with the length of a
tick in milliseconds as a longword.

The driver has a few unsupported features such as 25fps MIDI time 
code sync, and pitch bend sampling. If you don't use them they won't
bother you.

There is also a project called test.proj which shows how to
perform the basic driver functions from Lightspeed C. Good luck.

Questions, bugs, etc to :

Joe Chung
MIT Media Lab
20 Ames St
Cambridge, 02139

joe@media-lab.media.mit.edu